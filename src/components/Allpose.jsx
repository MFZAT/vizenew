/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/all.glb -o src/components/Allpose.jsx -k -K -r public 
*/

import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function Allpose({ happy, wave, happy2, sit, sit2, tie, ...props }) {
  const group = React.useRef();
  const { scene, animations } = useGLTF("/models/all.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions, names } = useAnimations(animations, group);
  materials["Material.030"].color.set("#bad89a");
  console.log(actions);
  useEffect(() => {
    if (happy) {
      actions[names[5]].fadeIn(0.5).play().reset();
    } else if (wave) {
      actions[names[2]].fadeIn(0.5).play().reset();
    } else if (happy2) {
      actions[names[6]].fadeIn(0.5).play().reset();
    } else if (sit) {
      actions[names[7]].fadeIn(0.5).play().reset();
    } else if (sit2) {
      actions[names[8]].fadeIn(0.5).play().reset();
    } else actions[names[1]].fadeIn(0.5).play().reset();
  }, [happy, wave, happy2, sit2]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="body001"
            geometry={nodes.body001.geometry}
            material={materials["Material.030"]}
            skeleton={nodes.body001.skeleton}
            castShadow
          />
          <skinnedMesh
            name="feet001"
            geometry={nodes.feet001.geometry}
            material={materials["Material.029"]}
            skeleton={nodes.feet001.skeleton}
            castShadow
          />
          <skinnedMesh
            name="hands"
            geometry={nodes.hands.geometry}
            material={materials["Material.032"]}
            skeleton={nodes.hands.skeleton}
            castShadow
          />
          <skinnedMesh
            name="head001"
            geometry={nodes.head001.geometry}
            material={materials["Material.031"]}
            skeleton={nodes.head001.skeleton}
            castShadow
          />
          <skinnedMesh
            name="path14001"
            geometry={nodes.path14001.geometry}
            material={materials["SVGMat.036"]}
            skeleton={nodes.path14001.skeleton}
          />
          {tie && (
            <>
              {" "}
              <skinnedMesh
                name="path15001"
                geometry={nodes.path15001.geometry}
                material={materials["SVGMat.037"]}
                skeleton={nodes.path15001.skeleton}
              />
              <skinnedMesh
                name="path16001"
                geometry={nodes.path16001.geometry}
                material={materials["SVGMat.038"]}
                skeleton={nodes.path16001.skeleton}
              />
              <skinnedMesh
                name="path17001"
                geometry={nodes.path17001.geometry}
                material={materials["SVGMat.039"]}
                skeleton={nodes.path17001.skeleton}
              />
            </>
          )}
          <skinnedMesh
            name="path5"
            geometry={nodes.path5.geometry}
            material={materials["SVGMat.035"]}
            skeleton={nodes.path5.skeleton}
          />
          <skinnedMesh
            name="path6"
            geometry={nodes.path6.geometry}
            material={materials["SVGMat.035"]}
            skeleton={nodes.path6.skeleton}
          />
          <skinnedMesh
            name="path9"
            geometry={nodes.path9.geometry}
            material={materials["SVGMat.035"]}
            skeleton={nodes.path9.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/all.glb");
